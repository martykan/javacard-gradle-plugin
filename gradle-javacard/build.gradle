plugins {
    id "groovy"
    id "com.gradle.plugin-publish" version '1.3.1'
    id "signing"
}

group = 'sk.neuromancer'
version = '1.8.1'


targetCompatibility = '1.8'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        url = "https://javacard.pro/maven"
    }
    maven {
        url = "https://deadcode.me/mvn"
    }
}

dependencies {
    implementation localGroovy()
    implementation 'com.github.martinpaljak:ant-javacard:24.11.19'
    implementation 'com.github.martinpaljak:gppro:24.10.15'
    implementation 'com.github.martinpaljak:gptool:24.10.15'
    implementation 'com.github.martinpaljak:globalplatformpro:24.10.15'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
}

publishing {
    repositories {
        maven {
            name = 'localPluginRepository'
            url = file('../local-plugin-repository')
        }
    }
}

signing {
    required {
        gradle.taskGraph.hasTask("uploadArchives")
    }
    sign configurations.archives
}


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}

gradlePlugin {
    website = 'https://github.com/J08nY/javacard-gradle-plugin'
    vcsUrl = 'https://github.com/J08nY/javacard-gradle-plugin'
    plugins {
        javacard {
            id = 'sk.neuromancer.gradle.javacard'
            implementationClass = 'sk.neuromancer.gradle.javacard.JavaCardPlugin'
            displayName = 'Gradle JavaCard plugin'
            description = 'Gradle JavaCard plugin'
            tags.set(['javacard'])
        }
    }
}

tasks.jar {
    duplicatesStrategy = DuplicatesStrategy.WARN
    manifest {
        attributes('Automatic-Module-Name': 'sk.neuromancer.gradle.javacard')
    }
}

compileJava {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    testLogging.showStandardStreams = true
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}